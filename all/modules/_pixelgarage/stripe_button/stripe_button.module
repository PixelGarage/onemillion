<?php
/**
 * Module file to implement a stripe button.
 * @file
 */

define('STRIPE_CHECKOUT_JS_PATH', 'https://checkout.stripe.com/checkout.js');



/* =============================================================================
 *   Stripe checkout callback
 * ========================================================================== */
/**
 * Implements hook_menu().
 */
function stripe_button_menu() {
  // handles AJAX token request
  $items['stripe/ajax/token'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'stripe_button_ajax_callback',
  );

  return $items;
}

/**
 * AJAX callback function of the stripe token creation.
 */
function stripe_button_ajax_callback() {
  // load stripe php library
  $library = libraries_load('stripe');
  if (!$library['loaded']) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    print '<div class="stripe-message">' . t("NO charge!\nStripe API missing") . '</div>';
    drupal_exit();
  }

  // set the private API key
  \Stripe\Stripe::setApiKey(_stripe_api_secret_key());

  // get the credit card details
  $token = $_POST['stripeToken'];
  $button_id = $_POST['id'];
  $amount = $_POST['amount'];
  $currency = $_POST['currency'];
  $email = $token['email'];
  $date = date('r'); // e.g. Thu, 21 Dec 2000 16:01:07 +0200
  $desc = t('@site charged you (@user) with @amount @curr on @date', array(
    '@site' => variable_get('site_name'),
    '@user' => $email,
    '@amount' => $amount/100, // amount in francs again
    '@curr' => $currency,
    '@date' => $date,
  ));

  // Create the charge - this will charge the user's card
  $msg = false;
  try {
    $charge = \Stripe\Charge::create(array(
      "amount" => $amount,
      "currency" => $currency,
      "source" => $token['id'],  // only token id!
      "description" => $desc,
      "receipt_email" => $email
    ));
  }
  catch(\Stripe\Error\Card $e) {
    // The card has been declined
    $e_json = $e->getJsonBody();
    $error = $e_json['error'];
    $msg = t($error['message']);
  }
  catch(\Stripe\Error\Base $e) {
    $e_json = $e->getJsonBody();
    $error = $e_json['error'];
    $msg = t($error['message']);
  }

  // create button (amount > 0 means normal button, amount == 0 means success button, amount < 0 means failure button)
  $success = !$msg ? 0 : -1;
  $button = theme('stripe_button_fix_value', array(
    'id' => $button_id,
    'amount' => $success,
    'currency' => $currency,
    )
  );

  // create error message
  $errorMsg  = $msg ? '<div class="label label-warning stripe-message">' . t("Error: @msg", array('@msg'=>$msg)) . '</div>' : '';

  // send answer to client
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $button;
  print $errorMsg;
  drupal_exit();
}


/* =============================================================================
 *   Stripe button theme
 * ========================================================================== */
/**
 * Implements hook_theme().
 */
function stripe_button_theme($existing, $type, $theme, $path) {
  return array(
    'stripe_button_fix_value' => array(
      'function' => 'theme_stripe_button_fix_value',
      'variables' => array(
        'id' => NULL,
        'amount' => NULL,
        'currency' => NULL,
        'csp' => FALSE,
      ),
    ),
  );
}

/**
 * Themes a Stripe Checkout button with a given amount and currency.
 */
function theme_stripe_button_fix_value($variables) {
  // Render Stripe Checkout button
  if ($variables['amount'] > 0) {
    //
    // Create initial button
    // Enforce strict content security policy
    if ($variables['csp'] == TRUE) {
      header("Content-Security-Policy: default-src 'self' https://checkout.stripe.com;");
    }

    // create HTML button
    $currency = strtoupper($variables['currency']);
    $label = t('@amount @currency', array('@amount' => $variables['amount'], '@currency' => $currency));
    $output = '<button id="' . $variables['id'] . '" class="btn btn-normal stripe-button">' . $label . '</button>';
  }
  else if ($variables['amount'] == 0) {
    //
    // successful payment, create success button (disabled)
    $label = t("Paid. Thanks.");
    $output = '<button id="' . $variables['id'] . '" class="btn btn-success stripe-button" disabled>' . $label . '</button>';
  }
  else {
    //
    // failed payment, create fail button (disabled)
    $label = t("NOT Paid. Sorry!");
    $output = '<button id="' . $variables['id'] . '" class="btn btn-warning stripe-button" disabled>' . $label . '</button>';
  }

  return $output;
}


/* =============================================================================
 *   DecimalNumber formatter (as Stripe button)
 * ========================================================================== */
/**
 * Implements hook_field_formatter_info().
 *
 * Two formatters for the decimal number field are added:
 *    stripe_button:  This formatter displays and charges a fixed value via the Stripe payment gateway.
 *    stripe_button_custom:  This formatter displays a user definable value via the Stripe payment gateway.
 **/
function stripe_button_field_formatter_info() {
  return array(
    'stripe_button_fixed' => array(
      'label' => t('Fixed value stripe button'),
      'field types' => array('number_decimal'),
      'settings'  => array(
        //Array of the settings we'll create
        'stripe_button_name' => '',
        'stripe_button_description' => '',
        'stripe_button_currency' => 'CHF',
        'stripe_button_label' => '',
      ),
    ),
    'stripe_button_custom' => array(
      'label' => t('Customizable stripe button'),
      'field types' => array('number_decimal'),
      'settings'  => array(
        //Array of the settings we'll create
        'stripe_button_name' => '',
        'stripe_button_description' => '',
        'stripe_button_currency' => 'CHF',
        'stripe_button_label' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function stripe_button_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'stripe_button_fixed' || $display['type'] == 'stripe_button_custom') {
    $options = array(
      'CHF'  => t('CHF'),
      'EUR' => t('EUR'),
      'USD' => t('USD'),
    );
    $element['stripe_button_name'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Company name'),
      '#default_value' => $settings['stripe_button_name'],
      '#description'   => t('Defines the company name shown in the dialog.'),
      '#required' => TRUE,
    );
    $element['stripe_button_description'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Description'),
      '#default_value' => $settings['stripe_button_description'],
      '#description'   => t('Defines the description shown in the dialog.'),
      '#required' => TRUE,
    );
    $element['stripe_button_currency'] = array(
      '#type' => 'select',
      '#title' => t('Currency'),
      '#options' => $options,
      '#default_value' => $settings['stripe_button_currency'],
    );
    $element['stripe_button_label'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Button label'),
      '#default_value' => $settings['stripe_button_label'],
      '#description'   => t("Defines the button label of the dialog submit button."),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function stripe_button_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'stripe_button_fixed' || $display['type'] == 'stripe_button_custom') {
    $summary[] = t('Company name:         @name', array('@name' => $settings['stripe_button_name']));
    $summary[] = t('Product description:  @desc', array('@desc' => $settings['stripe_button_description']));
    $summary[] = t('Currency:             @curr', array('@curr' => $settings['stripe_button_currency']));
  }

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 *
 * A Stripe button formatter for a number field is implemented.
 *
 */
function stripe_button_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $field_name = $instance['field_name'];

  // create drupal settings array
  $logo_path = theme_get_setting('logo_path', 'pixelgarage');
  $site_name = variable_get('site_name');
  $js_settings = array (
    'stripe_button' => array(
      'stripe_public_key' => _stripe_api_public_key(),
      'name' => $settings['stripe_button_name'] ? t($settings['stripe_button_name']) : $site_name,
      'icon' => $logo_path ? file_create_url($logo_path) : '',
    ),
  );

  // create stripe button render array
  $stripe_buttons = array();
  switch ($display['type']) {
    // This formatter outputs a button with the number as label.
    case 'stripe_button_fixed':
      foreach ($items as $delta => $item) {
        $amount = $item['value'];
        $button_id = drupal_clean_css_identifier($field_name . '-' . $delta);
        $button_settings = array(
          'description' => t($settings['stripe_button_description']),
          'currency' => $settings['stripe_button_currency'],
          'amount' => $amount*100,
          'buttonLabel' => t($settings['stripe_button_label']),
          'zipCode' => 0,
          'billingAddress' => 0,
          'shippingAddress' => 0,
          'allowRememberMe' => 1,
        );
        $stripe_buttons[$button_id] = $button_settings;

        $element[$delta] = array(
          '#theme' => 'stripe_button_fix_value',
          '#id' => $button_id,
          '#amount' => $amount,
          '#currency' => $settings['stripe_button_currency'],
          '#csp' => false,
        );
      }
      break;
    case 'stripe_button_custom':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          // We create a render array to produce the desired markup,
          // "<button data-stripe-amount="xy">xy @currency</button>".
          '#type' => 'markup',
          '#markup' => '',
          '#prefix' => '<div class="stripe-button-container">',
          '#suffix' => '</div>',
        );
      }
      break;
  }

  // add javascript and drupal settings
  $path = drupal_get_path('module', 'stripe_button');

  drupal_add_js(STRIPE_CHECKOUT_JS_PATH, 'external');
  drupal_add_js($path . '/js/stripe_button.js');
  $js_settings['stripe_button']['stripe_buttons'] = $stripe_buttons;
  drupal_add_js($js_settings, 'setting');

  return $element;
}
